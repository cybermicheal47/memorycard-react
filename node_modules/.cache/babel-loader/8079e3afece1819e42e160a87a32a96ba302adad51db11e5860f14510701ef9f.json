{"ast":null,"code":"var _jsxFileName = \"/home/cyb/memory/src/components/Card.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Counter from './Counter';\nimport pizza from '../images/pizza.jpg';\nimport burger from '../images/burger.jpg';\nimport fries from '../images/frying.jpg';\nimport fishsoup from '../images/fishsoup.jpg';\nimport chikenwings from '../images/bakedchickenwings.jpg';\nimport grilledchicken from '../images/grilledchicken.jpg';\nimport mexicantacos from '../images/Mexicantacos.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = () => {\n  _s();\n  const [cards, setCards] = useState([{\n    id: 1,\n    title: 'Pizza',\n    image: pizza\n  }, {\n    id: 2,\n    title: 'Burger',\n    image: burger\n  }, {\n    id: 3,\n    title: 'Ingredients',\n    image: fries\n  }, {\n    id: 4,\n    title: 'Baked Chickenwings',\n    image: chikenwings\n  }, {\n    id: 5,\n    title: 'Grilled Chicken',\n    image: grilledchicken\n  }, {\n    id: 6,\n    title: 'Mexican tacos',\n    image: mexicantacos\n  }]);\n  const [count, setCount] = useState(0);\n  const [lastNumber, setLastNumber] = useState(0);\n  function generateRandomNumber() {\n    return Math.floor(Math.random() * 10) + 1;\n  }\n  function resetCount() {\n    setCount(0);\n    console.log('Count reset.');\n  }\n  const handleCardClick = clickedCard => {\n    setCards(prevCards => {\n      const randomNumber = generateRandomNumber();\n      console.log(randomNumber);\n      setCount(count + 1);\n      if (count + 1 === randomNumber) {\n        setLastNumber(randomNumber);\n        console.log(`Last number before reset: ${lastNumber}`);\n        resetCount();\n      }\n      const clickedIndex = prevCards.findIndex(card => card.id === clickedCard.id);\n      const randomIndex = Math.floor(Math.random() * prevCards.length);\n      const updatedCards = [...prevCards];\n      const temp = updatedCards[clickedIndex];\n      updatedCards[clickedIndex] = updatedCards[randomIndex];\n      updatedCards[randomIndex] = temp;\n      return updatedCards;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"hscore\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          class: \"h2score\",\n          children: [\" Score: \", count, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 1\n        }, this), \"    \", /*#__PURE__*/_jsxDEV(\"h2\", {\n          class: \"h2hgh\",\n          children: [\" High Score: \", lastNumber, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [count, \", \", lastNumber, \"  \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        onClick: () => handleCardClick(card),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.image,\n          alt: \"Card Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: card.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, card.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Card, \"Zv01kWCyMCjfZJGSL/jY4NsB/E8=\");\n_c = Card;\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useState","Counter","pizza","burger","fries","fishsoup","chikenwings","grilledchicken","mexicantacos","jsxDEV","_jsxDEV","Card","_s","cards","setCards","id","title","image","count","setCount","lastNumber","setLastNumber","generateRandomNumber","Math","floor","random","resetCount","console","log","handleCardClick","clickedCard","prevCards","randomNumber","clickedIndex","findIndex","card","randomIndex","length","updatedCards","temp","children","class","fileName","_jsxFileName","lineNumber","columnNumber","className","map","onClick","src","alt","_c","$RefreshReg$"],"sources":["/home/cyb/memory/src/components/Card.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Counter from './Counter';\nimport pizza from '../images/pizza.jpg';\nimport burger from '../images/burger.jpg';\nimport fries from '../images/frying.jpg';\nimport fishsoup from '../images/fishsoup.jpg';\nimport chikenwings from '../images/bakedchickenwings.jpg';\nimport grilledchicken from '../images/grilledchicken.jpg';\nimport mexicantacos from '../images/Mexicantacos.jpg';\n\n\nconst Card = () => {\n  const [cards, setCards] = useState([\n    { id: 1, title: 'Pizza', image: pizza },\n    { id: 2, title: 'Burger', image: burger },\n    { id: 3, title: 'Ingredients', image: fries },\n    { id: 4, title: 'Baked Chickenwings', image: chikenwings },\n    { id: 5, title: 'Grilled Chicken', image: grilledchicken },\n    { id: 6, title: 'Mexican tacos', image: mexicantacos }\n  ]);\n  const [count, setCount] = useState(0);\n  const [lastNumber, setLastNumber] = useState(0);\n  function generateRandomNumber() {\n    return Math.floor(Math.random() * 10) + 1;\n    \n  }\n\n  function resetCount() {\n    setCount(0);\n    console.log('Count reset.');\n  }\n\n\n\n\n\n  \n  const handleCardClick = (clickedCard) => {   \n    setCards((prevCards) => {\n        const randomNumber = generateRandomNumber();\n        console.log(randomNumber)\n     \n        setCount(count + 1)\n        \n        if (count + 1 === randomNumber) {\n            setLastNumber(randomNumber);\n            console.log(`Last number before reset: ${lastNumber}`);\n            resetCount();\n          }\n\n\n       \n\n   \n      const clickedIndex = prevCards.findIndex((card) => card.id === clickedCard.id);\n      const randomIndex = Math.floor(Math.random() * prevCards.length);\n\n      const updatedCards = [...prevCards];\n      const temp = updatedCards[clickedIndex];\n      updatedCards[clickedIndex] = updatedCards[randomIndex];\n      updatedCards[randomIndex] = temp;\n\n\n      return updatedCards;\n     \n    });\n  };\n\n  return (\n    <div>\n\n<header>\n<div class=\"hscore\">\n\n<h2 class=\"h2score\"> Score: {count} </h2>    <h2 class=\"h2hgh\"> High Score: {lastNumber} </h2>\n</div>\n</header>\n<br/>\n\n      <div className=\"container\">\n\n        <h2>{count}, {lastNumber}  </h2>\n        {cards.map((card) => (\n          <div key={card.id} className=\"card\" onClick={() => handleCardClick(card) }>\n            <img src={card.image} alt=\"Card Image\" />\n            <h2>{card.title}</h2>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}